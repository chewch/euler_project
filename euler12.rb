require_relative 'euler_requires'
require 'prime'
require 'benchmark'
# Highly divisible triangular number

# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

def num_factors(number)
  primes, powers = number.prime_division.transpose
  exponents = powers.map{|i| (0..i).to_a}
  divisors = exponents.shift.product(*exponents).map do |powers|
    primes.zip(powers).map{|prime, power| prime ** power}.inject(:*)
  end
  divisors.length
end

def find_num_factors_of_tri_sum(divisors_requested)
  num_divisors = 0
  #prev_number = 1
  next_number = 2
  while num_divisors <= divisors_requested
    triangle_sum = (1..next_number).inject(:+) # ~8.8 seconds
    #triangle_sum = prev_number + next_number # ~4.4 seconds
    num_divisors = num_factors(triangle_sum)
    if num_divisors >= divisors_requested
      puts "Triangle Sum: #{triangle_sum}, Number of divisors: #{num_divisors}"
      return
    end
    #prev_number = triangle_sum
    next_number += 1
  end
end

Benchmark.bm do |x|
  x.report do
    num_divisors = 500
    find_num_factors_of_tri_sum(num_divisors)
  end
end

